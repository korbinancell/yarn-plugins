/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-version-inject",
factory: function (require) {
var plugin=(()=>{var k=Object.create,a=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var P=o=>a(o,"__esModule",{value:!0});var c=o=>{if(typeof require!="undefined")return require(o);throw new Error('Dynamic require of "'+o+'" is not supported')};var b=(o,e)=>{for(var r in e)a(o,r,{get:e[r],enumerable:!0})},E=(o,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of D(e))!M.call(o,s)&&s!=="default"&&a(o,s,{get:()=>e[s],enumerable:!(r=y(e,s))||r.enumerable});return o},p=o=>E(P(a(o!=null?k(R(o)):{},"default",o&&o.__esModule&&"default"in o?{get:()=>o.default,enumerable:!0}:{value:o,enumerable:!0})),o);var S={};b(S,{default:()=>V});var f=p(c("@yarnpkg/core"));var l=p(c("@yarnpkg/core")),m="$(",w=/^\$\(.+?\)$/,g=class{supportsDescriptor(e,r){return e.range.startsWith(m)?!!w.test(e.range):(console.log(e.range),!1)}supportsLocator(e,r){return!1}shouldPersistResolution(e,r){throw new Error("Unreachable")}bindDescriptor(e,r,s){let n=e.range.slice(m.length,-1),t=s.project.configuration.get("sharedVersions");if(!t)throw new Error("No `sharedVersions` property in .yarnrc.yml found.");let i=t.get(n);if(!i)throw new Error(`Missing property ${n} in sharedVersions config.`);return l.structUtils.makeDescriptor(l.structUtils.makeIdent(e.scope,e.name),`npm:${i}`)}getResolutionDependencies(e,r){return[]}async getCandidates(e,r,s){throw new Error("Unreachable")}async getSatisfying(e,r,s){return null}async resolve(e,r){throw new Error("Unreachable")}};var v=p(c("@yarnpkg/core")),O=["dependencies","devDependencies","peerDependencies"],u="$(";async function d(o,e){let{project:r}=o,s=!1;for(let n of O)for(let t of o.manifest.getForScope(n).values()){if(!t.range.startsWith(u))continue;let i=t.range.slice(u.length,-1),h=r.configuration.get("sharedVersions").get(i);e[n][v.structUtils.stringifyIdent(t)]=h}}var L={configuration:{sharedVersions:{description:"Map of package versions to share between packages.",type:f.SettingsType.MAP,valueDefinition:{description:"",type:f.SettingsType.STRING}}},hooks:{beforeWorkspacePacking:d,afterAllInstalled:()=>{console.log("What a great install, am I right?")}},resolvers:[g]},V=L;return S;})();
return plugin;
}
};
