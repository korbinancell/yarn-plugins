/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-version-inject",
factory: function (require) {
var plugin=(()=>{var k=Object.create,i=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var M=e=>i(e,"__esModule",{value:!0});var l=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var P=(e,r)=>{for(var o in r)i(e,o,{get:r[o],enumerable:!0})},w=(e,r,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of V(r))!b.call(e,s)&&s!=="default"&&i(e,s,{get:()=>r[s],enumerable:!(o=D(r,s))||o.enumerable});return e},g=e=>w(M(i(e!=null?k(R(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var x={};P(x,{default:()=>T});var u=g(l("@yarnpkg/core"));var f=g(l("@yarnpkg/core"));var v="$(",O=/^\$\(.+?\)$/;function a(e){return e.startsWith(v)&&O.test(e)}function c(e){return e.slice(v.length,-1)}var m=class{supportsDescriptor(r,o){return a(r.range)}supportsLocator(r,o){return!1}shouldPersistResolution(r,o){throw new Error("Unreachable")}bindDescriptor(r,o,s){let t=c(r.range),n=s.project.configuration.get("sharedVersions");if(!n)throw new Error("No `sharedVersions` property in .yarnrc.yml found.");let p=n.get(t);if(!p)throw new Error(`Missing property ${t} in sharedVersions config.`);return f.structUtils.makeDescriptor(f.structUtils.makeIdent(r.scope,r.name),p)}getResolutionDependencies(r,o){return[]}async getCandidates(r,o,s){throw new Error("Unreachable")}async getSatisfying(r,o,s){return null}async resolve(r,o){throw new Error("Unreachable")}};var d=g(l("@yarnpkg/core"));var E=["dependencies","devDependencies","peerDependencies"];async function h(e,r){let{project:o}=e;for(let s of E)for(let t of e.manifest.getForScope(s).values()){if(!a(t.range))continue;let n=c(t.range),y=o.configuration.get("sharedVersions").get(n);r[s][d.structUtils.stringifyIdent(t)]=y}}var L={configuration:{sharedVersions:{description:"Map of package versions to share between packages.",type:u.SettingsType.MAP,valueDefinition:{description:"",type:u.SettingsType.STRING}}},hooks:{beforeWorkspacePacking:h},resolvers:[m]},T=L;return x;})();
return plugin;
}
};
